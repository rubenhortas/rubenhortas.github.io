---
title: Upload a package to PyPI automatically with Github Actions
date: 2024-11-02 00:00:01 +0000
categories: [python, pypi]
tags: [programming, python, pypi,github,github actions, howto]
---

Some time ago, I wrote the post [Upload a package to PyPI](https://rubenhortas.github.io/posts/upload-package-pypi/), but, how everything evolves, this time I decided to evolve and take adbantage of all the power of [Github Actions](https://docs.github.com/en/actions).

# Github actions

[Github actions](https://docs.github.com/en/actions) allows us to automate, customize and execute development workflows right in our github repositories. 
With [Github actions](https://docs.github.com/en/actions) we can automate a lot of tasks (build, tests, deployments, code reviews, issue management...) when an event occurs in our repository.
[Github actions](https://docs.github.com/en/actions) it's a very powerful tool, I have to say that, for me, it has been like discovering a new world.

To automate our tasks, [Github](https://github.com) will suggest us some workflows based on the repository type, we can create our own workflows, but we can use workflows created by other users using the [Actions Marketplace](https://github.com/marketplace?type=actions) and we can modfify workflows done by other users (advantages of the open source :P).

In my case, I want to automate the publishing of my project [fail2bangeolocation](https://github.com/rubenhortas/fail2bangeolocation) to [testpypi.org](https://test.pypi.org/) and [pypi.org](https://pypi.org/).
The first thing I though about was taking advantage of some workflow written by the community.
But, after reviewing some workflows in [Github](https://github.com) and the [Actions Marketplace](https://github.com/marketplace?type=actions), I saw that they didn't quite fit what I wanted, and I decided to write my own workflow based on some of them.

# Publishing using Github actions

## Requirements

* A package with the required structure

To publish our python package to [pypi.org](https://pypi.org/), we'll need to adhere to a specific project structure.
There is a basic example of the required structure:

```shell
/project
├── LICENSE
├── pyproject.toml
├── README.md
├── requirements.txt
├── src
│   ├── project
│   │   ├── module
│   │   │   └──...
│   │   └──...
│   └──...
└── tests
    └──...
```

* [testpypi.org](https://test.pypi.org/) and [pypi.org](https://pypi.org/) accounts

The [testpypi.org](https://test.pypi.org/) it's optional, but it's recomended.
Uploading the package first to [testpypi.org](https://test.pypi.org/), we can check if there are problems, and we can check how the upload went before going into production.

## Configuring trusted publishing

Trusted publishing exchanges short-lived tokens (using [OpenID Connect (OIDC)](https://openid.net/developers/how-connect-works/)) between a trusted third-party service (in our case [Github](https://github.com)) and [pypi.org](https://pypi.org/).
This method can be used in automated environments and eliminates the need to use manually generated API tokens to authenticate with [pypi.org](https://pypi.org/) when publishing.

> I had the project upload to testpypi and pypi, but If you don't have your project uploaded yet, you can create a ["pending" trusted publisher](https://docs.pypi.org/trusted-publishers/creating-a-project-through-oidc/).
{: .prompt-info}

The steps to crete a [pending] publisher in testpypi and pypi, are basically the same:

### Configuring trusted publishing in testpypi

We go to our testpipy account, we go to "Your projects" and we select our project (in my case fail2bangeolocation), and we click in "Manage":

![Manage](testpypi-your-projects.png){: width="700" height="600" .shadow}
*testpypi manage your project*

We go to "Publishing":

![Publishing](testpypi-publishing.png){: width="700" height="600" .shadow}
*testpypi publishing*

Under "Trusted Publisher Management" we add a new publisher:

![New publisher](testpypi-new-publisher.png){: width="700" height="600" .shadow}
*testpypi new publisher*



## Creating a workflow


*Enjoy! ;)*
